# use https://www.keycloak.org/server/importExport to import initial realm
# Docker container usage: https://www.keycloak.org/server/containers#_importing_a_realm_on_startup
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak-config
  labels:
    app.kubernetes.io/name: keycloak
data:
  kubedoop-realm.json: |
    {
      "realm": "$KEYCLOAK_REALM",
      "enabled": true,
      "users": [
        {
          "enabled": true,
          "username": "$KEYCLOAK_TRINO_USERNAME",
          "firstName": "user",
          "lastName": "user",
          "email": "user@example.com",
          "credentials": [
            {
              "type": "password",
              "value": "$KEYCLOAK_TRINO_PASSWORD"
            }
          ],
          "realmRoles": [
            "user"
          ]
        }
      ],
      "roles": {
        "realm": [
          {
            "name": "user",
            "description": "User role"
          }
        ]
      },
      "clients": [
        {
          "clientId": "$KEYCLOAK_CLIENT_ID",
          "enabled": true,
          "clientAuthenticatorType": "client-secret",
          "secret": "$KEYCLOAK_CLIENT_SECRET",
          "standardFlowEnabled": true,
          "protocol": "openid-connect",
          "redirectUris": [
            "*"
          ],
          "webOrigins": [
            "*"
          ],
          "protocolMappers": [
            {
              "name": "auth2-proxy-audiences",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-mapper",
              "consentRequired": false,
              "config": {
                "included.client.audience": "auth2-proxy",
                "id.token.claim": "true",
                "lightweight.claim": "false",
                "access.token.claim": "true",
                "introspection.token.claim": "true"
              }
            }
          ]
        }
      ]
    }
---
apiVersion: v1
kind: Secret
metadata:
  name: keycloak-admin-credentials
  labels:
    app.kubernetes.io/name: keycloak
type: Opaque
stringData:
  KEYCLOAK_ADMIN: admin
  KEYCLOAK_ADMIN_PASSWORD: admin
---
apiVersion: v1
kind: Secret
metadata:
  name: keycloak-user-credentials
  labels:
    app.kubernetes.io/name: keycloak
type: Opaque
stringData:
  KEYCLOAK_TRINO_USERNAME: ($OIDC_TRINO_USERNAME)
  KEYCLOAK_TRINO_PASSWORD: ($OIDC_TRINO_PASSWORD)
  KEYCLOAK_REALM: ($KEYCLOAK_REALM)
  KEYCLOAK_CLIENT_ID: ($KEYCLOAK_CLIENT_ID)
  KEYCLOAK_CLIENT_SECRET: ($KEYCLOAK_CLIENT_SECRET)

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: keycloak
  labels:
    app.kubernetes.io/name: keycloak
spec:
  replicas: 1
  serviceName: "keycloak"
  selector:
    matchLabels:
      app.kubernetes.io/name: keycloak
  template:
    metadata:
      labels:
        app.kubernetes.io/name: keycloak
    spec:
      initContainers:
      - name: init-bootstrap-data
        image: quay.io/zncdatadev/tools:1.0.0-kubedoop0.0.0-dev
        envFrom:
        - secretRef:
            name: keycloak-user-credentials
        command:
        - /bin/sh
        - -c
        - |
          # Substitute environment variables in the realm file
          mkdir -p /opt/keycloak/data/import
          envsubst < /tmp/keycloak-config/kubedoop-realm.json > /opt/keycloak/data/import/kubedoop-realm.json
        volumeMounts:
        - name: keycloak-config
          mountPath: /tmp/keycloak-config
        - name: data
          mountPath: /opt/keycloak/data/
      containers:
      - name: keycloak
        image: quay.io/keycloak/keycloak:25.0
        args:
        - start-dev
        - --import-realm
        envFrom:
        - secretRef:
            name: keycloak-admin-credentials
        resources:
          limits:
            memory: "1Gi"
            cpu: "1000m"
          requests:
            memory: "256Mi"
            cpu: "250m"
        ports:
        - containerPort: 8080
          name: http
        readinessProbe:
          httpGet:
            scheme: HTTP
            path: /realms/master
            port: 8080
        livenessProbe:
          httpGet:
            scheme: HTTP
            path: /realms/master
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 10
        startupProbe:
          httpGet:
            scheme: HTTP
            path: /realms/master
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        volumeMounts:
        - name: data
          mountPath: /opt/keycloak/data
      volumes:
      - name: keycloak-config
        configMap:
          name: keycloak-config
      - name: data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: keycloak
  labels:
    app.kubernetes.io/name: keycloak
spec:
  selector:
    app.kubernetes.io/name: keycloak
  ports:
  - port: 8080
    targetPort: http
